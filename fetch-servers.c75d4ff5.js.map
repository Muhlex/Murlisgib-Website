{"version":3,"sources":["js/fetch-servers.js"],"names":["clusters","url","ready","fun","document","readyState","addEventListener","chunk","array","size","result","index","length","push","slice","titleCase","str","toLowerCase","split","map","word","toUpperCase","join","parseResponse","responseText","serverArray","timestamp","players","maxplayers","getReliableTimestamp","response","fetch","json","unixtime","checkOnline","currTimestamp","tolerance","parseMapName","mapname","prefix","startsWith","replace","updateHTML","clusterIndex","servers","clusterEl","querySelector","serverEls","querySelectorAll","classList","add","i","online","forEach","mapEl","playersEl","statusEl","innerHTML","update","error","console","warn","Math","floor","Date","now","rawData","text","server","updateEvery","updateInterval","window","setInterval","visibilityState","clearInterval"],"mappings":"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","file":"fetch-servers.c75d4ff5.js","sourceRoot":"../src","sourcesContent":["const clusters = [\n  { url: \"https://cors-anywhere.herokuapp.com/http://play.gib.murl.is/serverinfo\" }\n];\n\nfunction ready(fun) {\n  if (document.readyState != 'loading') {\n    fun();\n  } else {\n    document.addEventListener('DOMContentLoaded', fun);\n  }\n}\n\nfunction chunk(array, size) {\n  const result = [];\n  let index = 0;\n  while (index < array.length) {\n    result.push(array.slice(index, size + index));\n    index += size;\n  }\n  return result;\n}\n\nfunction titleCase(str) {\n  return str.toLowerCase().split(' ').map(function (word) {\n    return (word[0].toUpperCase() + word.slice(1));\n  }).join(' ');\n}\n\nfunction parseResponse(responseText) {\n  const responseArray = responseText.split('\\n');\n  return chunk(responseArray, 4).map(serverArray => {\n    return {\n      timestamp: serverArray[0],\n      players: serverArray[1],\n      maxplayers: serverArray[2],\n      map: serverArray[3],\n    };\n  });\n};\n\nasync function getReliableTimestamp() {\n  const response = await fetch(\"https://worldtimeapi.org/api/timezone/Etc/UTC\");\n  const json = await response.json();\n  return json.unixtime;\n}\n\nfunction checkOnline(timestamp, currTimestamp, tolerance = 60 * 15) {\n  return (timestamp < currTimestamp + tolerance && timestamp > currTimestamp - tolerance);\n}\n\nfunction parseMapName(mapname, prefix) {\n  if (mapname.toLowerCase().startsWith(prefix.toLowerCase())) mapname = mapname.slice(prefix.length);\n\n  return titleCase(mapname.replace(/_/g, ' '));\n}\n\nfunction updateHTML(clusterIndex, servers) {\n  const clusterEl = document.querySelector(`[data-server-cluster-index='${clusterIndex}']`);\n  const serverEls = clusterEl.querySelectorAll(\"[data-server-index]\");\n\n  clusterEl.classList.add(\"synced\");\n\n  if (servers.length === 0) {\n    for (let i = 0; i < serverEls.length; i++) {\n      servers[i] = {\n        online: false,\n      };\n    }\n  }\n\n  servers.forEach(({ online, players, maxplayers, map }, index) => {\n    const mapEl = serverEls[index].querySelector(\".servers__map\");\n    const playersEl = serverEls[index].querySelector(\".servers__players\");\n    const statusEl = serverEls[index].querySelector(\".servers__status\");\n\n    if (!online) {\n      map = null;\n      players = null;\n    }\n\n    mapEl.innerHTML = map ? parseMapName(map, \"mg_\") : \"&ndash;\";\n    playersEl.innerHTML = players ? `${players}/${maxplayers}` : '&ndash;';\n    statusEl.innerHTML = online ? \"Online\" : \"Offline\";\n    serverEls[index].classList.add(online ? \"online\" : \"offline\")\n  });\n};\n\nasync function update() {\n  let currTimestamp;\n  try {\n    currTimestamp = await getReliableTimestamp();\n  } catch (error) {\n    console.warn(\"Unable to fetch remote timestamp. Using local time.\\n\", error);\n    currTimestamp = Math.floor(Date.now() / 1000);\n  }\n\n  clusters.forEach(async ({ url }, clusterIndex) => {\n    let servers = [];\n\n    try {\n      const response = await fetch(url);\n      const rawData = await response.text();\n      servers = parseResponse(rawData);\n    } catch (error) {\n      console.warn(\"Could not fetch data for cluster\", clusterIndex);\n      console.error(error);\n    }\n    servers = servers.map(server => {\n      return {\n        online: checkOnline(server.timestamp, currTimestamp),\n        ...server,\n      };\n    });\n    ready(() => updateHTML(clusterIndex, servers));\n  });\n};\n\nupdate();\nconst updateEvery = 60;\nlet updateInterval = window.setInterval(update, 1000 * updateEvery);\n\ndocument.addEventListener(\"visibilitychange\", () => {\n  if (document.visibilityState === 'visible') {\n    update();\n    updateInterval = window.setInterval(update, 1000 * updateEvery);\n  } else {\n    window.clearInterval(updateInterval);\n  }\n});\n"]}